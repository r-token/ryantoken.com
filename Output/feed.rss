<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Ryan Token</title><description>I'm a üíª programmer, üéôÔ∏è podcaster, üìù writer, üèàüèÄ sports fan, and Ô£ø enthusiast.</description><link>https://ryantoken.com</link><language>en</language><lastBuildDate>Sun, 7 Mar 2021 11:03:59 -0600</lastBuildDate><pubDate>Sun, 7 Mar 2021 11:03:59 -0600</pubDate><ttl>250</ttl><atom:link href="https://ryantoken.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://ryantoken.com/blog/learning-webrtc</guid><title>Learning WebRTC</title><description>Explaining WebRTC concepts while reinforcing my own understanding.</description><link>https://ryantoken.com/blog/learning-webrtc</link><pubDate>Sun, 7 Mar 2021 09:30:00 -0600</pubDate><content:encoded><![CDATA[<h1>Learning WebRTC</h1><p>March 07, 2021</p><p><em>Explaining WebRTC concepts while reinforcing my own understanding.</em></p><br /><hr><br /><style type="text/css">
.resizable-image img {
    text-align: center;
    margin: auto;
    width: 100%;
    border-radius: 5px;
}
</style><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-logo.png" alt="WebRTC logo"/>
</div><br /><p>WebRTC can be tricky to wrap your mind around ‚Äì there's a lot involved and it's easy to get overwhelmed. Once you understand the basics though, it's much easier to reason about the rest.</p><p>I've been working heavily with the standard over the past several weeks and wanted to document the knowledge I've gained while also providing some sample code, evaluating the technology's pros and cons, and supplying resources for continued learning.</p><br /><h2>First, What is WebRTC?</h2><p><a href="https://webrtc.org">WebRTC</a> stands for <strong>Web</strong> <strong>R</strong>eal-<strong>T</strong>ime <strong>C</strong>ommunication and, as you'd expect from the name, enables real-time communication for the web. Think video calls, web-based chat, etc.</p><p>The technology has grown significantly since its initial implementation in 2011 as an open-source project by Google. Today, it's implemented as an open, standardized API that enables rich peer-to-peer communications, including the transmission of audio, video, and generic data between browsers, mobile devices, IoT devices, and more.</p><p>The most important thing WebRTC takes off your plate is the challenge of finding the best peer-to-peer path to exchange data in an efficient and low-latency manner.</p><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-overview.jpg" alt="WebRTC overview"/>
</div><p><em>WebRTC Overview</em></p><br /><h2>A Typical WebRTC Lifecycle</h2><ul><li>Client <em>A</em> wants to connect to Client <em>B</em></li></ul><ul><li><em>A</em> first needs to determine all possible ways that the public can connect to it (A)</li></ul><ul><li><em>B</em> then also needs to determine how the public can connect to it (B)</li></ul><ul><li><em>A</em> and <em>B</em> signal this session information (SDP) (more on this later) to each other <strong>somehow</strong>. This can be via text message, with a QR code, via HTTP, via WebSockets, or something else. How you send this information doesn't matter.</li></ul><ul><li><em>A</em> then connects to <em>B</em> via the most optimal path (determined by ICE) (more on this later as well)</li></ul><ul><li><em>A</em> &amp; <em>B</em> also exchange their supported media types and security information</li></ul><ul><li>An agreement is made, and the connection is opened</li></ul><br /><h2>Necessary Concepts &amp; Terminology</h2><p>There are several terms you'll need to be familiar with before we discuss WebRTC further. I'll briefly introduce them below.</p><br /><p><strong><em>NAT</em></strong>: Network Address Translation</p><p>To understand WebRTC, you have to understand the fundamentals of NAT. I'll try my best at a simple explanation of NAT and why it's necessary here.</p><p><em>The problem</em>: Devices don't have their own public IP addresses.</p><p>The only way to connect to another device is via its public IP address. If our device doesn't have its own public IP, how will we be able to communicate that information out for someone else to use?</p><p><em>The answer</em>: NAT</p><p>NAT bridges this gap. NAT operates on the router and translates our devices' private IPs into a public IP that others can reach us at.</p><p>When others try to reach you, they ultimately reach your router's public IP and your router translates that back to your device's private IP.</p><p>There are four different NAT types: Full Cone NAT (normal NAT), Address-Restricted NAT, Port-Restricted NAT, and Symmetric NAT. All of these work well with WebRTC <em>except</em> Symmetric NAT. More info on the four NAT types <a href="https://dh2i.com/kbs/kbs-2961448-understanding-different-nat-types-and-hole-punching/" target="_blank">here</a>.</p><p>In the context of WebRTC, our devices pass through our routers to a STUN server. The STUN server sends us back a public IP address we can use to connect peer-to-peer with another client.</p><br /><p><strong><em>STUN</em></strong>: Session Traversal Utilities for NAT</p><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-STUN.jpg" alt="STUN server"/>
</div><p><em>A STUN Server Example</em></p><br /><p>A STUN server's main job is to tell a client what its public IP address/port is through NAT.</p><p>Talking to a STUN server is table stakes for any WebRTC application. We first need to find <em>our</em> public presence so we can communicate that information to someone else. Once someone else has that information, we can try to open a connection with them.</p><p>STUN servers are cheap to maintain, and many are publicly available for free usage.</p><br /><p><strong><em>TURN</em></strong>: Traversal Using Relays around NAT</p><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-TURN.jpg" alt="TURN server"/>
</div><p><em>A TURN Server example</em></p><br /><p>As I mentioned previously, WebRTC does not work well with Symmetric NAT. This is caused by Symmetric NAT blocking communications with the STUN server.</p><p>If a router is using Symmetric NAT, STUN won't work, and we'll have to fall back to a TURN server. This gets rid of the peer-to-peer benefit of WebRTC and requires all communication to pass through this single TURN server instead, which creates a bottleneck and could buckle under heavy usage.</p><p>If a TURN server is required, I've heard people argue for just using a standard web server with a reverse proxy instead. Theoretically this would give you similar functionality while allowing you to have more control over the server. I haven't formed my own opinion on this topic yet.</p><br /><p><strong><em>ICE</em></strong>: Interactive Connectivity Establishment</p><p>So we've discussed private IP addresses, public IP addresses, STUN servers, TURN servers, and more. How do we know which options are the best to connect with?</p><p>This is the primary job of ICE. It finds the optimal path from one peer to another by conducting connectivity checks.</p><p>ICE collects all available ICE candidates (information for each available path) and sends them to the remote peer via SDP. ICE will then collect all available candidates on the remote peer as well.</p><p>With both peers' session information now understood, ICE can determine the best path for a connection between the two clients.</p><p>This process can take some time, sometimes in the 10s of seconds. To get off the ground a little quicker, you can use a relatively new WebRTC feature called Trickle ICE. Trickle ICE takes the ICE process and runs it in parallel, so you won't need to wait for every candidate to be found before sending the information via SDP. This can dramatically improve the time it takes to make the initial connection with the remote peer.</p><br /><p><strong><em>SDP</em></strong>: Session Description Protocol</p><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-SDP.jpg" alt="SDP example"/>
</div><p><em>An SDP Example - basically a giant string of session information</em></p><br /><p>SDP is arguably the most important concept in WebRTC. SDP is the information that ICE sends back and forth to try and establish the best possible connection.</p><p>Despite its name, SDP is less of a protocol and more of a <em>format</em>. It describes all ICE candidates, networking options, media options (audio/video), security options, etc., and combines it all into one massive string.</p><p>Once another client has this information, a connection between the two clients can be attempted.</p><p>For another person to connect with us though, we need some way to communicate our SDP information out to them. This is called <strong>signaling</strong>.</p><p>Once you have your SDP string, you'll need to signal it out yourself. WebRTC does not care how this is done, but it also doesn't provide a built-in way to do this. You can send out your SDP information through a QR code, a messaging app like WhatsApp or iMessage, via WebSockets, HTTP, or anything else. We just need to get that large SDP string to the other party.</p><br /><h2>Revisiting the WebRTC Lifecycle</h2><p>Now that we understand the fundamental WebRTC concepts, let's revisit a standard WebRTC communication lifecycle with some more detail.</p><p>Some additional information first: Every client maintains two SDP descriptions, a local SDP description and the SDP description of the remote client it's trying to connect to.</p><ul><li>Client <em>A</em> wants to connect to Client <em>B</em></li></ul><ul><li><em>A</em> creates an <strong>offer</strong>. The offer is just the SDP string that consists of all ICE candidates, security options, audio/video options, etc</li></ul><ul><li><em>A</em> then sets its <strong>local</strong> SDP description to the <strong>offer</strong> it just created.</li></ul><ul><li><em>A</em> signals that offer to <em>B</em> via SDP. Again, it doesn't matter how this signaling happens (iMessage, HTTP request, etc)</li></ul><ul><li><em>B</em> receives <em>A</em>'s <strong>offer</strong>, and sets <em>A</em>'s <strong>offer</strong> as its remote SDP description</li></ul><ul><li><em>B</em> creates an <strong>answer</strong> to send back to <em>A</em>, and sets that <strong>answer</strong> as its own local SDP description</li></ul><ul><li><em>B</em> signals its <strong>answer</strong> to <em>A</em> via SDP</li></ul><ul><li><em>A</em> receives <em>B</em>'s <strong>answer</strong>, and sets <em>B</em>'s <strong>answer</strong> as <em>A</em>'s remote SDP description</li></ul><ul><li>With all SDP information now understood by both parties, an agreement can be made. The connection is created and data can flow between the two clients</li></ul><br /><h2>A Vanilla Implementation</h2><p>Let's walk through how to create a basic WebRTC connection between two peers using just the vanilla WebRTC API. We won't use any libraries or anything extra on top of it ‚Äì just the basics so you really understand what's happening here. You could run this code directly in two browser windows via the browser's dev tools and it would work.</p><p><strong><em>Browser One</em></strong></p><ol><li>Create the local peer connection.</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-localConnection.png" alt="WebRTC local connection code"/>
</div><br /><ol start="2"><li>Create a data channel from that connection.</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-dataChannel.png" alt="WebRTC data channel code"/>
</div><br /><ol start="3"><li>Set up listeners on this channel for when a message is received (onmessage) and when a connection is opened (onopen).</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-dataChannelListeners.png" alt="WebRTC data channel listeners code"/>
</div><br /><ol start="4"><li>Set up a listener on the local connection for new ICE candidates. Print the SDP string every time we get a new ICE candidate. This will provide examples of what SDP strings look like.</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-onIceCandidateListener.png" alt="WebRTC ice candidate listener code"/>
</div><br /><ol start="5"><li>Create the offer locally, and set that offer as our local SDP description.</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-localCreateOffer.png" alt="WebRTC local create offer code"/>
</div><br /><p><strong><em>Browser Two</em></strong></p><p>Now open a new browser window, and we'll work on connecting the two browsers.</p><ol><li>After running the previous commands in browser one, you should have an SDP offer string printed out in your browser's dev tools. Copy and paste that from browser one, and set it to a new variable in browser two. It should look something like this:</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-offerVariable.png" alt="WebRTC offer variable code"/>
</div><br /><ol start="2"><li>Create the remote peer connection.</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-remoteConnection.png" alt="WebRTC remote connection"/>
</div><br /><ol start="3"><li>Print the SDP string every time we get a new ICE candidate on the remote side this time.</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-remoteOnIceCandidate.png" alt="WebRTC remote onIceCandidate listener example"/>
</div><br /><ol start="4"><li>Set up a listener on the remote connection that will receive the data channel from the other connection.</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-remoteOnDataChannel.png" alt="WebRTC remote onDataChannel listener"/>
</div><br /><ol start="5"><li>Set our remote and local SDP descriptions based on the offer we received (remote SDP description) and the answer we create (local SDP description).</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-sdpDescriptions.png" alt="WebRTC SDP descriptions code"/>
</div><br /><p><strong><em>Back to Browser One</em></strong></p><ol><li>Set the answer SDP we just generated in the previous step to an answer variable.</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-answerVariable.png" alt="WebRTC answer variable code"/>
</div><br /><ol start="2"><li>We're coming full circle now. In the first section (Browser One), we set the local connection's local description. In the second section (Browser Two), we set the remote connection's local &amp; remote descriptions. And now, we close the loop by setting the local connection's remote description to the answer we just set in the previous step. This opens the connection between the two peers.</li></ol><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-setLocalRemoteDescription.png" alt="WebRTC setLocalRemoteDescription code"/>
</div><br /><ol start="3"><li>The connection is now open, and we can send data back and forth between the two browsers with the send() function.</li></ol><p><em>Browser One (the local connection)</em></p><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-dataChannelSend.png" alt="WebRTC send message code"/>
</div><br /><p><em>Browser Two (the remote connection)</em></p><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-code-remoteDataChannelSend.png" alt="WebRTC remote send message code"/>
</div><br /><ol start="4"><li>You should see each of those messages in the other browser's dev tools now. üëç</li></ol><br /><h2>WebRTC Pros and Cons</h2><p><strong><em>Pros</em></strong>:</p><ul><li>Having a peer-to-peer connection is fantastic. It allows for low latency and high-bandwidth content to be shared seamlessly</li></ul><ul><li>WebRTC provides a standardized way for developers to implement this functionality with an API that we don't have to build ourselves</li></ul><ul><li>It's a popular open-source technology supported by Google, Mozilla, Opera, and others. You can browse the source code <a href="https://webrtc.googlesource.com/src/" target="_blank">here</a></li></ul><p><strong><em>Cons</em></strong>:</p><ul><li>Maintaining STUN and TURN servers<ul><li>STUN isn't too bad since there are free STUN servers <a href="https://gist.github.com/zziuni/3741933" target="_blank">publicly available for you to use</a>.</li><li>TURN is expensive and more difficult, and no one offers them for free usage like STUN servers</li><li>Kind of a Pro, but you <em>can</em> create your own STUN and TURN servers with the <a href="https://github.com/coturn/coturn" target="_blank">COTURN</a> open-source project</li></ul></li></ul><ul><li>Peer-to-Peer can fall apart in cases of many participants<ul><li>If you have 100 people in one environment, maintaining peer-to-peer connections between all 100 people isn't viable. This would be 99x100 individual connections</li><li>A centralized server makes more sense here. Everyone connects to the centralized server, and you maintain the connection and traffic rules on that server</li><li>More latency in this scenario, but much more viable</li><li>Large online games don't use WebRTC, for example. They use a centralized server people connect to</li></ul></li></ul><br /><h2>Powering Up with Amazon Kinesis Video Streams</h2><p>As mentioned, one of the cons of WebRTC is the need to maintain and manage various STUN and TURN servers.</p><p><a href="https://docs.aws.amazon.com/kinesisvideostreams-webrtc-dg/latest/devguide/what-is-kvswebrtc.html">Amazon Kinesis Video Streams with WebRTC</a> offers a potential solution to this problem, as well as handling the signaling implementation for you.</p><p>AWS offers <a href="https://docs.aws.amazon.com/kinesisvideostreams-webrtc-dg/latest/devguide/webrtc-sdks.html" target="_blank">SDKs</a> to work with this service from the web, iOS, Android, and embedded devices.</p><p>In AWS's words, Amazon Kinesis Video Streams (KVS) "provides a standards-compliant WebRTC implementation as a fully managed capability. You can use Amazon Kinesis Video Streams with WebRTC to securely live stream media or perform two-way audio or video interaction between any camera IoT device and WebRTC-compliant mobile or web players. As a fully managed capability, you don't have to build, operate, or scale any WebRTC-related cloud infrastructure, such as signaling or media relay servers to securely stream media across applications and devices."</p><p>Using this service abstracts away the need to manage your own STUN and TURN servers while optimizing for even lower latency and higher bandwidth streaming.</p><p>There's a fantastic walkthrough of how to get up and running with this service <a href = "https://aws.amazon.com/blogs/media/enabling-video-chats-using-amazon-kinesis-video-streams-for-webrtc/" target="_blank">here</a>. Familiarity with AWS isn't necessarily required to follow that blog post but is certainly helpful.</p><br /><div class="resizable-image">
    <img src="../../blog_images/learning-webrtc/webrtc-kvs.png" alt="AWS KVS with WebRTC Diagram"/>
</div><p><em>AWS Kinesis Video Streams with WebRTC Architecture Diagram</em></p><br /><p>I was able to build a very performant peer-to-peer video streaming application by building on top of the aforementioned walkthrough. I recommend giving it a try and seeing how it goes for you. There's also some fantastic sample code on <a href="https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-js" target="_blank">GitHub</a>.</p><br /><h2>Resources I Used While Learning</h2><ul><li><em>Getting Started with WebRTC</em> on <a href="https://webrtc.org/getting-started/overview" target="_blank">WebRTC.org</a></li></ul><ul><li><em>WebRTC API</em> on the <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API" target="_blank">Mozilla Developer Network</a></li></ul><ul><li><em>WebRTC Crash Course</em> on <a href="https://www.youtube.com/watch?v=FExZvpVvYxA" target="_blank">YouTube</a><ul><li>This was particularly helpful. I highly recommend you take the time to watch the full thing</li><li>Many of the concepts in this post were inspired directly by this video</li></ul></li></ul><ul><li><em>Introduction to WebRTC</em> on <a href="https://www.youtube.com/watch?v=NdEEp_WvnvU&t=705s" target="_blank">YouTube</a></li></ul><ul><li><em>What is Kinesis Video Streams with WebRTC</em> from <a href="https://docs.aws.amazon.com/kinesisvideostreams-webrtc-dg/latest/devguide/what-is-kvswebrtc.html" target="_blank">AWS</a></li></ul><ul><li><em>Kinesis Video Streams with WebRTC: How it Works</em> from <a href="https://docs.aws.amazon.com/kinesisvideostreams-webrtc-dg/latest/devguide/kvswebrtc-how-it-works.html" target="_blank">AWS</a></li></ul><ul><li><em>Enabling Video Chats Using Amazon Kinesis Video Streams with WebRTC</em> from <a href="https://aws.amazon.com/blogs/media/enabling-video-chats-using-amazon-kinesis-video-streams-for-webrtc/" target="_blank">AWS</a></li></ul><ul><li><em>Amazon Kinesis Video Streams implementation</em> on <a href="https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-js" target="_blank">GitHub</a></li></ul><br /><h2>A Final Note</h2><p>There are a lot of YouTube videos that claim to teach you WebRTC by "building a Zoom clone" or something similar. I worked through a couple of these and found them to be less than valuable. Most layer on a bunch of third-party libraries like socket.io, simple-peer, peer.js, and others to handle the dirty work.</p><p>In my opinion, it's far better to fully understand the fundamentals before adding on these libraries.</p><p>Thank you for reading!</p><br /><p><strong><a href="#">Back to Top</a></strong></p>]]></content:encoded></item><item><guid isPermaLink="true">https://ryantoken.com/blog/rocking-with-the-jamstack</guid><title>Rocking with the Jamstack</title><description>Diving into the Jamstack, and loving every minute of it.</description><link>https://ryantoken.com/blog/rocking-with-the-jamstack</link><pubDate>Sun, 21 Feb 2021 07:00:00 -0600</pubDate><content:encoded><![CDATA[<h1>Rocking with the Jamstack</h1><p>February 21, 2021</p><p><em>Diving into the Jamstack, and loving every minute of it.</em></p><br /><hr><br /><style type="text/css">
.resizable-image img {
	text-align: center;
	margin: auto;
	width: 100%;
	border-radius: 5px;
}
</style><div class="resizable-image">
	<img src="../../blog_images/rocking-with-the-jamstack/rwj-jamstack-logo.png" alt="Jamstack logo"/>
</div><br /><h2>What Is the Jamstack?</h2><p>There comes a time in every young developer's life when they stumble upon a technology, or a philosophy around technologies, that just <em>works</em> for them. At least, that's what I envision an older and more experienced developer telling me.</p><p>That's been the <a href="https://jamstack.org" target="_blank">Jamstack</a> for me.</p><p>The Jamstack, originally styled as JAMstack, can sound a bit nebulous at first. The J-A-M there stands for <strong>J</strong>avaScript, <strong>A</strong>PIs, and <strong>M</strong>arkup. Those are the only required ingredients for any Jamstack application. There is no specific framework involved, no cloud provider or back end language you <em>need</em> to use, no required toolchain or build process. There are very few hard-and-fast requirements at all. It is a vague term intentionally, and that's one of its positives, but there <strong>are</strong> two requirements.</p><p><strong><em>First</em></strong>: a static front end</p><p>A Jamstack front end is pre-rendered. That is to say, the content that a user sees on the client-side is generated <em>before</em> it's required, not <em>once</em> it's required. This gives Jamstack applications a massive speed advantage.</p><p>This markup generation happens during a build step rather than on-demand on the server-side. Because of this, your app doesn't need to repeatedly make network round-trips to serve up the pages the user requests; they've already been generated and are there instantly for the user to interact with. This takes the load off of the web host and dramatically improves scalability.</p><p><strong><em>Second</em></strong>: decoupling</p><p>A college professor of mine continually stressed the idea of applications that were "loosely coupled and highly cohesive".</p><p>Half of the idea he was pushing here was the concept of decoupling. A decoupled application has clean separation points between its various parts. Decoupling allows each component of the application to be more easily understandable and simpler to swap out or upgrade.</p><p>The key takeaway in the context of the Jamstack is to enforce a clean separation between your front end and your back end services.</p><p>This means a static site on the front end with serverless functions on the back end. Your front end should not care what you're using on the back end, and vice-versa. Each can be iterated on independently without ever impacting the other.</p><p>The loosely coupled glue between the front end and back end in a Jamstack application is the API layer. I use AWS's <a href="https://aws.amazon.com/api-gateway/" target="_blank">API Gateway</a> to host my APIs, but there are plenty of options.</p><br /><h2>Ok, great, but seriously what IS the Jamstack?</h2><p>All of this is to say that the Jamstack is NOT a specific set of languages or tools you need to learn - it's a mindset of <em>how</em> to build applications (with some recommendations üôÇ).</p><br /><div class="resizable-image">
	<img src="../../blog_images/rocking-with-the-jamstack/rwj-architecture.png" alt="Jamstack architecture"/>
</div><br /><h2>Why Should You Care?</h2><p>Modern web development can be exhausting and overwhelming. Jamstack applications aim to simplify your architecture while significantly enhancing the speed, scalability, and overall performance of your application.</p><ul><li><strong>Speed</strong>: The fact that all of your pages are static and pre-rendered means your page load times will decrease dramatically compared to a standard server-side rendered app.</li></ul><ul><li><strong>Scalability</strong>: Server-side rendered applications inherently slow down when under heavy load. The web servers get buried under a mountain of requests and suffer when they can't fulfill all the requests for each page in time. This problem simply does not exist for Jamstack applications. The pages are already rendered on the front end ‚Äì all your app needs to do is show users the page they want. No network round-trip necessary.</li></ul><ul><li><strong>Future Proofing</strong>: The decoupled nature of Jamstack applications means you can easily swap out your Angular front end with a React front end, or vice-versa. Want to migrate your back end services from Azure to AWS? Or write them all in Python instead of Node.js? Your front end won't care, and it will be a much simpler process.</li></ul><ul><li><strong>Developer Experience</strong>: Developing with the Jamstack is just fun. There are cutting-edge technologies in use across the board. Having Netlify automatically see a change on my main branch in GitHub and then seamlessly deploy a new build out to production still makes me smile every time. The Jamstack supports all of the latest JavaScript frameworks too. React, Gatsby, Next.js, Hugo, and more are all widely supported.</li></ul><br /><h2>How to Get Started</h2><p>It's easier than you think! Outside of a basic understanding of JavaScript and APIs, there are hardly any <em>specific</em> technologies you need to know in order to start building Jamstack applications. There are some concepts you should be familiar with, though:</p><ul><li><strong>Static Site Generators</strong>: Frameworks that take in one source, like JavaScript or Markdown, and create static HTML files from them. Examples include <a href="https://www.gatsbyjs.com" target="_blank">Gatsby</a>, <a href="https://gohugo.io" target="_blank">Hugo</a>, <a href="https://nextjs.org" target="_blank">Next.js</a>, and I'd even include the indomitable <a href="https://create-react-app.dev" target="_blank">Create React App</a>.</li></ul><ul><li><strong>Hosting Sites</strong>: Where you host the static content generated by your static site generator. My go-to has been <a href="https://www.netlify.com" target="_blank">Netlify</a>, a consistent champion of the Jamstack. Others include <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html" target="_blank">AWS S3</a>, <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website" target="_blank">Azure Storage</a>, and <a href="https://vercel.com" target="_blank">Vercel</a>.</li></ul><ul><li><strong>Back End Services</strong>: The "A" in Jamstack stands for APIs. Those API calls typically route to some serverless functions that you create but don't maintain physical infrastructure for. These can be AWS <a href="https://aws.amazon.com/lambda/" target="_blank">Lambda</a> functions, <a href="https://www.netlify.com/products/functions/" target="_blank">Netlify Functions</a>, <a href="https://azure.microsoft.com/en-us/services/functions/" target="_blank">Azure Functions</a>, or a host of others. With Netlify Functions specifically, you can create a file for each function, add a configuration file that tells Netlify where those files are, and Netlify will handle the rest. Netlify automatically hosts them as AWS Lambda functions for you and takes care of everything from there.</li></ul><ul><li><strong>Data Storage</strong>: Your serverless database. Where your data will persist. The top options among Jamstack developers include <a href="https://fauna.com" target="_blank">Fauna</a/>, <a href="https://www.mongodb.com" target="_blank">MongoDB</a>, <a href="https://airtable.com" target="_blank">Airtable</a>, and <a href="https://aws.amazon.com/dynamodb/" target="_blank">DynamoDB</a>.</li></ul><p>There are also plenty of learning resources out there. One of the best is <a href="https://jamstackconf.com" target="_blank">Jamstack Conf</a> - a semiannual developer conference solely focused on the Jamstack. The past few events have been free to attend, and I've gotten a lot of value out of them.</p><br /><h2>My Experience So Far</h2><p>I've built several Jamstack applications now and have thoroughly enjoyed every bit of it. Of all its benefits, the one that resonates most with me is just how fun it is to write apps this way. Creating a React front end that calls an array of serverless functions, all while hosted on the powerful Netlify CDN, was incredibly quick to set up and simple to reason about.</p><p>Another point that I haven't touched on yet: if you are a hobby developer who doesn't want to spend much (or any) money, this way of building applications can be mind-bogglingly powerful.</p><p><strong>Some quick price points for you:</strong></p><ul><li>CDN and Hosting with Netlify: <em>Free</em></li></ul><ul><li>Serverless Functions with AWS Lambda: <em>Free</em> (up to one million function calls per month)</li></ul><ul><li>API Setup with AWS API Gateway: <em>Free</em> (up to one million API calls per month)</li></ul><ul><li>Data Storage with AWS DynamoDB: <em>Free</em> (up to 25 GB of data)</li></ul><p>Yes, you read that right. You can build and run a fairly sizable project <em>completely</em> for free. I've had two Jamstack applications running live in production with hundreds of users for months, and have yet to be charged a dime. It's so good it almost feels like cheating.</p><br /><h2>Next Steps</h2><p>I am all-in on the Jamstack. As always, there are plenty of areas still for me to expand on and improve.</p><p>My front ends are all currently either using Gatsby or Create React App. I am <em>very</em> interested in <a href="https://nextjs.org" target="_blank">Next.js</a>, and will be diving into this heavily in the near future. Netlify was very quick to support Next.js, and I'm psyched about this integration.</p><p>I'm also (in my opinion) a bit too much of an AWS purist right now. Don't get me wrong, AWS is fantastic, but I need to diversify a bit. Some of the other options I mentioned above, specifically in the data storage realm, sound quite exciting. Using <a href="https://fauna.com" target="_blank">Fauna</a/> as a data store over AWS's DynamoDB is likely in my future.</p><p>Further, I want to try out Netlify's own serverless Netlify Functions feature instead of manually building my own Lambda functions within AWS.</p><p>That's where I'm at for now. I'm extremely excited about the future of web development with the Jamstack. There are so many cool things happening around developer experience and workflow right now. The future looks incredibly bright, and the Jamstack is leading the charge.</p><br /><p><strong><a href="#">Back to Top</a></strong></p>]]></content:encoded></item><item><guid isPermaLink="true">https://ryantoken.com/blog/catching-up</guid><title>Catching Up</title><description>Modernizing CatchUp, my first iOS app, with SwiftUI, Core Data, and cleaner code.</description><link>https://ryantoken.com/blog/catching-up</link><pubDate>Fri, 8 May 2020 08:00:00 -0500</pubDate><content:encoded><![CDATA[<h1>Catching Up</h1><p>May 08, 2020</p><p><em>Modernizing CatchUp, my first iOS app, with SwiftUI, Core Data, and cleaner code.</em></p><br /><hr><br /><p>CatchUp - Keep in Touch was first released on May 6, 2018. It was the first iOS app I'd ever published to the App Store. Almost exactly two years later, I'm publishing this blog post and releasing an all-new, completely rewritten version of CatchUp.</p><p>This post talks about the origins of CatchUp, my decision to start over from scratch, implementing SwiftUI and Core Data, and writing cleaner code. At the end of this post, I do a bit of comparison between the new version and the previous version.</p><br /><h2>Getting Started with iOS</h2><p>When I graduated from college in 2017 I was primarily only familiar with web development. I had never taken a mobile development course in school and knew nothing about Objective-C or Swift. For whatever reason, iOS/mobile development hadn't truly crossed my mind until after graduation. But once I started down that path in late 2017 I never turned back.</p><p>I spent the next several months learning the basics of Swift, UIKit, and everything else that comes along with iOS development. Most of that learning came via courses on <a href="https://www.udemy.com" target="_blank">Udemy</a>, tutorials from <a href="https://www.hackingwithswift.com" target="_blank">Hacking with Swift</a> and <a href="https://www.swiftbysundell.com" target="_blank">Swift by Sundell</a>, finding answers on <a href="https://stackoverflow.com" target="_blank">Stack Overflow</a>, and stumbling around in the dark by myself until I happened upon a solution.</p><p>When all was said and done I had my first app, and it worked! Much like <a href="https://ryantoken.com/blog/rebuilding-my-website" target="_blank">version one of my website</a>, it wasn't the greatest app in the world, but it was my app, and I was proud to have built it.</p><p>I put it out on the App Store on May 6, 2018, and, to my surprise, it did reasonably well. It even caught some publicity in the form of a feature in Brett Terpstra's <a href="https://esn.fm/systematic/218" target="_blank">Systematic</a> podcast around the 46:00 minute mark of episode 218.</p><p>However, over the following months/years, CatchUp began to suffer from some poor original choices made in the app.</p><br /><h2>A Lull in Development</h2><p>During the first few months after release in 2018, I updated CatchUp semi-regularly with new features and some minor design tweaks. However, as I began evaluating some larger-scope features I wanted to implement, I continued to run into the same problem.</p><p>Above all else, my existing code was just plain <em>bad</em>.</p><p>As I mentioned, I put this out pretty much immediately after I had learned the basics of Swift and iOS development. Knowing the basics != knowing how to make a good application. My naming was poor, many functions were massive and had far too many interspersed responsibilities, there was no consistency in where components were located, I was practically trial-and-erroring my Storyboards, etc. The list could go on and truly envelop this entire post. I'll spare you that pain.</p><p>The app was simple and straightforward enough that nearly all of this went unnoticed by users. There was only one noticeable performance issue and it didn't bother me enough at the time. As I said, the app was doing well! It was receiving nearly all 5-star reviews and was featured on a podcast. What more could I ask for?</p><p>Lesson learned. Good reviews do not mean a high-quality application. As my plans for the app grew more ambitious, and as I learned more about proper development from my full-time job, the code atrocities I was committing became ever more glaring. I consistently ran into walls caused by poor code quality as I continued to explore implementing more robust features.</p><p>I simply lost motivation for the app about a year after release. I didn't want to put forth the necessary effort to fix the underlying problems with the code that were holding it back. And so... In May of 2019, CatchUp was essentially left to die. Then came the email from Apple.</p><br /><h2>Starting Over</h2><p>In March 2020, Apple sent an email to all developers with a reminder that all apps for iPhone or iPad must be built with the iOS 13 SDK or later by June 30. If they weren't, they would no longer be available on the App Store.</p><p>CatchUp was my first iOS app; it holds a special place in my heart. But it was poorly written and had become increasingly difficult to maintain because of that.</p><p>This brought me to a crossroads of sorts. I saw three options in front of me.</p><br /><p><strong>Option 1: Let it die.</strong></p><p>I honestly did consider this. My initial attempts at building the app with the iOS 13 SDK severely broke a significant amount of functionality. Figuring this out would mean an even bigger maintenance hole to dig myself out of.</p><p><strong>Option 2: Bite the bullet and fix the app, but stick with the core technologies I began with.</strong></p><p>This probably would have taken less time than the option I ended up choosing, but would have been far less fun, and I would have learned so much less.</p><p><strong>Option 3: Start from scratch and rewrite everything.</strong></p><p>Why not just blow away the whole project and start over?</p><p>A headlining announcement from WWDC 2019 was the debut of <a href="https://developer.apple.com/xcode/swiftui/" target="_blank">SwiftUI</a>. SwiftUI is a brand new framework from Apple that allows you to build user interfaces declaratively. Previously, all of iOS development was done imperatively using <a href="https://developer.apple.com/documentation/uikit" target="_blank">UIKit</a>. I watched the announcement happen live, and was instantly excited and drawn to it. I had initially considered rewriting parts of CatchUp with SwiftUI, but not the entire app.</p><br /><p>Clearly I picked <strong>Option 3</strong>. SwiftUI marked the dawn of a new era in iOS development, and this was the perfect excuse for me to start a new project and learn how SwiftUI works.</p><p>Option 3 also provided the perfect opportunity to address what ended up being one of the worst decisions I made while building the original app: using <a href="https://developer.apple.com/documentation/foundation/userdefaults" target="_blank">UserDefaults</a> as my persistence/storage system instead of <a href="https://developer.apple.com/documentation/coredata" target="_blank">Core Data</a>.</p><p>Everything in version 1.x of CatchUp uses UserDefaults. I didn't choose UserDefaults because I thought that was the <em>right</em> way to do it, I chose UserDefaults simply because that's what I had learned from the Udemy course I took when first learning iOS development. I knew nothing about Core Data or how it worked at the time, and storing everything in UserDefaults has plagued CatchUp from the beginning. Until today.</p><p>So there was my path forward. A complete rebuild using SwiftUI over UIKit, and Core Data over UserDefaults. I was ecstatic about the idea, and CatchUp would get to live to see another day.</p><br /><h2>Implementing SwiftUI</h2><p>On the same day that SwiftUI was first announced back in 2019, I started working through Apple's (legitimately wonderful) <a href="https://developer.apple.com/tutorials/swiftui/tutorials" target="_blank">Learn to Make Apps with SwiftUI</a> tutorials. I also participated in Hacking with Swift's (also wonderful) <a href="https://www.hackingwithswift.com/100/swiftui" target="_blank">100 Days of SwiftUI</a> course and read <a href="https://www.hackingwithswift.com/quick-start/swiftui" target="_blank">SwiftUI by Example</a>. All of these things together gave me enough knowledge to feel somewhat comfortable with SwiftUI, even though documentation around it was/is not quite there.</p><p>In the case of implementing Core Data, it's been around since 2005. There are <em>plenty</em> of resources out there to help you learn and understand how it works. SwiftUI was built to play nicely with Core Data as well, so after a few articles and WWDC videos from previous years, I felt good enough on that side of things.</p><p>The rewrite started off moving at lightspeed. SwiftUI was <strong>amazing</strong>. Legitimately. I had a full mockup of all the major aspects of the user interface done in just a few hours, and they all looked better than before.</p><p>Of course, as expected and as I've heard from others who have used SwiftUI, once you get past the basics and move into an area where not much has been done yet, you find yourself in a strange and unknown world of mystery. Here are a couple of the strangest SwiftUI holes I found myself in.</p><br /><p><strong>SwiftUI Issue #1:</strong></p><p>In CatchUp's 'Preference' screen, there are a few different pickers you might work with. I wanted to run some code every time one of those pickers was interacted with. Sounds simple enough, right? Using SwiftUI's onReceive modifier <em>does</em> work, but actually getting the value out the picker when onReceive is triggered is much weirder than you'd think.</p><p>You have to attach [self.<em>someSelection</em>].publisher.first() to the onReceive call, and then pass in the value from the picker via a closure. I can only hope that this is fixed in a subsequent SwiftUI update because it was maddeningly difficult to figure that out.</p><p>Here's the workaround I found on Stack Overflow - the fix is highlighted at the bottom of the picture:</p><style type="text/css">
.resizable-image img {
    text-align: center;
    margin: auto;
    width: 100%;
    border-radius: 5px;
}
</style><br /><div class="resizable-image">
    <img src="../../blog_images/catching-up/catchingup-onReceive.png" alt="SwiftUI onReceive weirdness"/>
</div><br /><p><strong>SwiftUI Issue #2:</strong></p><p>At the time of writing, you need to manually pass Core Data's <a href="https://developer.apple.com/documentation/coredata/nsmanagedobject/1506677-managedobjectcontext" target="_blank">managed object context</a> from one view to another if you want to be able to use that context in the view you're navigating to.</p><p>SwiftUI's <a href="https://developer.apple.com/documentation/swiftui/environment" target="_blank">@Environment</a> property wrapper should theoretically allow the managed object context to be accessible from anywhere. You shouldn't need to manually pass it along.</p><p>Unfortunately, this appears to be a bug in the version of SwiftUI I built the app on. So I had to use the following workaround to pass in the managed object context.</p><p>Here's what I found:</p><br /><div class="resizable-image">
    <img src="../../blog_images/catching-up/catchingup-moc.png" alt="SwiftUI MOC weirdness"/>
</div><br /><p>There were several other small issues that I bumped into when building this out, but those two took me the longest to find solutions for. In general, though, this is what my browser typically looked like while in the throes of SwiftUI development:</p><br /><div class="resizable-image">
    <img src="../../blog_images/catching-up/catchingup-somanytabs.png" alt="SwiftUI Browser Tabs"/>
</div><p><em>So. Many. SwiftUI. Tabs. (shout-out to Hacking with Swift and Swift by Sundell for solving most of my problems)</em></p><br /><p>There's also a <strong>third issue</strong> that still hasn't been resolved as of this post being published and the app being released. Apple's Contacts frameworks don't work with SwiftUI at all.</p><p>To be fair, this is the case with several frameworks since SwiftUI is still so new. However, for most frameworks that don't work natively with SwiftUI, you can simply create a bridge into UIKit. You'd render just those views using UIKit instead of SwiftUI, then come back to SwiftUI when you're done. The interplay between SwiftUI and UIKit was heavily advertised when SwiftUI was debuted in 2019, and, for the vast majority of frameworks, seems to work as expected.</p><p>Unfortunately, I've found the bridging between SwiftUI and UIKit for the contact picker to be especially buggy. This is not ideal. The contact picker - which shows up when you tap the 'Add Contacts' button on CatchUp's home screen - is likely the first button you'll ever tap in the app. I don't want a user's first experience with my app to feel buggy and show strange animation glitches.</p><p>I filed my first ever <a href="https://developer.apple.com/support/technical/" target="_blank">Technical Support Incident (TSI)</a> with Apple, and hope to have a resolution for that bug shortly.</p><p>I want to make something especially clear, though: Despite the somewhat bumpy road, I have <strong>loved</strong> working with SwiftUI. It has been a true joy and has significantly improved how I go about creating user interfaces. CatchUp V1 used Storyboards exclusively, and I would be more than OK with never having to create a Storyboard again. I know I could have done my layout programmatically with UIKit, but it's hard to imagine a system as clean and as nice as SwiftUI is proving to be.</p><br /><h2>Wrapping Up with Clean Code</h2><p>As I was putting the finishing touches on version 2.0 of CatchUp, I started reading <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank">Clean Code</a> by "Uncle" Bob Martin.</p><p>I'll tell you what, dear reader, there could not have been a better time for me to read this book.</p><p>Since releasing the original app in 2018, I had learned a lot. I knew the SOLID principles, I understood the importance of proper naming and concise logic, etc., but all of that truly sank in on a deeper level upon reading that book on my own.</p><p>While reading it, I found that nearly every chapter gave me some new idea on how to organize or clean up my code even further. It was a fantastic experience. I went from code, to book, to code, to book, and back and forth again and again until I was satisfied with the app as a whole.</p><p>If you haven't read it, and you want to be a better programmer, I can't recommend it enough. Even being over a decade old at this point, I found it incredibly valuable.</p><p>Before reading it, CatchUp 2.0 was a massive improvement in underlying code quality simply from having gained more experience and a greater understanding of what "good" code is. After reading it, I am quite proud of the quality of code I've written. To be sure, there is more work to be done and more improvements to be made. But to have rewritten an entire app from scratch, leave all the cruft and bad ideas behind, and come out on the other end with what I have now is immensely satisfying.</p><p>Here's a single point of reference for you: the difference in the number of total lines of code from version 1.1.2 to version 2.0.0, one update (and one year) later.</p><p>Lines of code is by no means a proper metric for overall code quality, but I think it represents how much simplification I was able to do for what is, by all accounts, an app that has <em>more</em> functionality than the previous version.</p><p><strong>Total lines of code in CatchUp version 1.1.2:</strong> 2,924</p><p><strong>Total lines of code in CatchUp version 2.0.0:</strong> 1,905</p><p><em>Lines of code counted with <a href="https://github.com/AlDanial/cloc" target="_blank">cloc</a></em></p><p>Over 1,000 fewer lines of code! For an app that is more advanced and has more functionality, I consider that a significant win.</p><br /><h2>What's Next</h2><p>With SwiftUI and cleaner code, CatchUp is ready for the new era of iOS development. I plan to write all of my personal apps in SwiftUI going forward unless there is something that makes it physically impossible to do so.</p><p>I'm proud of the product that's available out there now, and look forward to continuing to build on the modern foundation it has today.</p><p>CatchUp is completely free with no ads. Download the all-new CatchUp ‚Äì Keep in Touch below:</p><br /><a href="https://itunes.apple.com/us/app/catchup-keep-in-touch/id1358023550" target="_blank" style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/assets/shared/badges/en-us/appstore-lrg.svg) no-repeat;width:270px;height:80px;background-size:contain;"></a><br /><br /><p><strong><a href="#">Back to Top</a></strong></p>]]></content:encoded></item><item><guid isPermaLink="true">https://ryantoken.com/blog/rebuilding-my-website</guid><title>Rebuilding My Website</title><description>Why I decided to rebuild ryantoken.com from the ground up, and how I did it with Swift (and without JavaScript).</description><link>https://ryantoken.com/blog/rebuilding-my-website</link><pubDate>Sun, 22 Mar 2020 11:02:00 -0500</pubDate><content:encoded><![CDATA[<h1>Rebuilding My Website</h1><p>March 22, 2020</p><p><em>Why I decided to rebuild ryantoken.com from the ground up, and how I did it with Swift (and without JavaScript).</em></p><br /><hr><br /><h2>Website V1: Bootstrap All the Things</h2><p>The summer of 2015 was the summer between my sophomore and junior years at the University of Tulsa. I had taken a few programming classes by that point, and was drawn to web development. To prove to myself that I knew my way around the basics, I wanted to build a personal website ‚Äì I didn't have a plan for it, but I knew that I wanted it.</p><p>Most recently, I had learned about a tool called <b><a href="https://getbootstrap.com/" target="_blank">Bootstrap</a></b>. Everyone and their mother raved about Bootstrap. In 2015, it sounded like the end-all be-all for responsive web design. Spoiler: it wasn't. But I, a young and impressionable college student, Bootstrapped the ever-loving heck out of version one of my website.</p><p>See for yourself: (most text blurred out for my own privacy)</p><style type="text/css">
.resizable-image img {
    text-align: center;
    margin: auto;
    width: 100%;
    border-radius: 5px;
}
</style><br /><div class="resizable-image">
    <img src="../../blog_images/rebuilding-my-website/rmw-websiteV1-blurred.png" alt="ryantoken.com v1"/>
</div><p><em>You don't get much more Bootstrappy than that.</em></p><br /><p>There are several items there that scream Bootstrap (and inexperience) if you know what you're looking for.</p><p>What screams Bootstrap? If you're familiar with it at all, you'll probably notice them immediately. The header, the Jumbotron (or Hero Unit, as Bootstrap now calls it), the three-column layout, and the footer.</p><p>All four of those items are classic, vanilla Bootstrap with very few modifications. Remember ‚Äì in 2015 I was a bona-fide noob in the world of web development. I had no idea what I was doing. Bootstrap was awesome, and in some ways still is. It solved a lot of problems for a fledgling web developer.</p><p>Also, apparently CSS gradients were the greatest things I'd ever seen, as I threw different variations of them wherever I could fit them.</p><p>But hey, this was the first website I had built completely on my own. I had no input from a boss, teachers, or fellow students. I was, and still am, proud that I built it. I learned a lot that I wouldn't have learned otherwise, it helped solidify my love of web development, and when all was said and done, there was a product out there that the world could see.</p><br /><h2>Iterations</h2><p>So that was 2015. Until this complete rebuild in March of 2020, it stayed <em>more or less</em> the same for the next several years. It did go through a couple of design refreshes over that time, though.</p><p>Notably:</p><br /><div class="resizable-image">
    <img src="../../blog_images/rebuilding-my-website/rmw-websiteV2-blurred.png" alt="ryantoken.com v2"/>
</div><br /><br /><p>And then:</p><br /><div class="resizable-image">
    <img src="../../blog_images/rebuilding-my-website/rmw-websiteV3-blurred.png" alt="ryantoken.com v3"/>
</div><br /><br /><p>In the first of those two design refreshes, I got my feet wet with transparency, and added some dynamic functionality to the footer that let you navigate the website page-by-page from there.</p><p>The second is how the website looked the day before I published the rewrite you're reading this on now.</p><p>I finally got rid of those blue-teal gradient boxes, left the three-column layout behind, added some dimensionality and pictures, and significantly simplified the codebase.</p><p>However, after five years of the same basic layout, it was time for a complete re-think of my website. The previous site felt stale and I didn't enjoy working on it or adding to it as much anymore. More than anything, though, was the fact that I'm out of college now.</p><p>The previous site was very much focused on me, my resume, and my portfolio of projects. I no longer felt that I needed as much of a 'resume' site. My mindset has shifted dramatically since college, and so my website needed to shift dramatically along with it.</p><br /><h2>Considering My Options</h2><p>I knew I wanted to completely recreate the website with modern developer tools and a system that would be easy and fun to iterate on. I did not know, however, what exactly I'd be using to kick this off. To help narrow those options down, I listed out my goals for the site:</p><div>
<ul style="margin-left: 25px">

    <li> It should have a blogging component </li>
    
    <li> It should be fun for me to work on and add to, instead of feeling like a chore </li>
    
    <li> It should be built with a modern language and toolset </li>
    
    <li> It should not look like every other personal website out there </li>
    
</ul>
</div><br /><p>I've added several new skills to my personal toolbox since 2015, my favorites of which are <a href="https://reactjs.org/" target="_blank">React</a> and <a href="https://developer.apple.com/swift/" target="_blank">Swift</a>. I use React for most of my web projects, and Swift and <a href="https://developer.apple.com/xcode/swiftui/" target="_blank">SwiftUI</a> for native iOS projects.</p><p>On the side, I run a podcast and blog covering University of Tulsa athletics. As part of that, I built <a href="https://thegoldenhurricast.com" target="_blank">our website</a> with React. That was my first React project, and you might see some similarities to the screenshots above. That's because, more for comfort than anything, I used <a href="https://react-bootstrap.github.io/" target="_blank">React Bootstrap</a> to create the front-end. It's basically Bootstrap rebuilt for use in a React environment. It was easy to pick up due to my familiarity with Bootstrap, and I liked it, but I've since been using <a href="https://material-ui.com/" target="_blank">Material-UI</a> for React projects.</p><p>I wrote a <a href="https://thegoldenhurricast.com/blog" target="_blank">blogging engine</a> with React as part of that project, and my first inclination was to reuse the skills I had picked up from that. I would've gone with Material-UI instead of React Bootstrap for the front-end design, but I could have reused a lot of the rest. That would have been the easier way for me, and I strongly considered that option.</p><p>Contrarily, I've been pretty deep into iOS development since 2017. I taught myself Swift, released my <a href="https://apps.apple.com/us/app/catchup-keep-in-touch/id1358023550" target="_blank">first iOS app</a> in May of 2018, and have several more that I've worked on locally but haven't released. Let me be clear, I <em>really</em> enjoy writing code with Swift. The type-safety, readability, community, and plenty more made it incredibly fun to learn.</p><p>I've long wanted to build a website with Swift, but was never fully satisfied with the available tools. I've toyed around with server-side Swift frameworks like <a href="https://vapor.codes/" target="_blank">Vapor</a> and <a href="https://www.kitura.io/" target="_blank">Kitura</a>, and found both to be capable but overly-complicated solutions for what I wanted.</p><p>And then I found <a href="https://github.com/JohnSundell/Publish" target="_blank">Publish</a>. Publish is an open-source "static site generator for Swift developers" built by <a href="https://twitter.com/johnsundell" target="_blank">John Sundell</a>. John is a former lead iOS developer at Spotify who now runs his own company called <a href="https://swiftbysundell.com" target="_blank">Swift by Sundell</a> that is, naturally, all about Swift development. Publish was open-sourced in December of 2019, and all of Swift by Sundell is built with Publish.</p><br /><h2>A Full Redesign ‚Äì Zero JavaScript</h2><p>I cloned Publish from GitHub to familiarize myself with it for a few days, and was hooked. I decided that this was the best (and most fun) answer.</p><p>Publish was exactly what I was looking for. It lets you build and configure your <strong>entire website</strong> with Swift and <a href="https://daringfireball.net/projects/markdown/" target="_blank">Markdown</a>, nearly everything is customizable, and it comes with native support for blogging built in. It also supports custom themes, plugins, and a host of other powerful options.</p><p>There is <strong>zero JavaScript</strong> throughout the entire site. This doesn't attempt to solve the <a href="https://www.youtube.com/watch?v=kZRE7HIO3vk&t=4160s" target="_blank">Thirty Million Line Problem</a>, but it does mitigate the bloat of <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f" target="_blank">JavaScript Framework Hell</a>. That's a great article by the way, well worth the read. Long story short, front-end JavaScript frameworks come with a LOT of bloat, most of which will never be of use to you. Getting rid of all that code speeds up load times <em>significantly</em>, hopefully you'll notice that while navigating my site.</p><p>The main Swift file to build a site with Publish is incredibly simple to understand. Here's what mine first looked like:</p><br /><div class="resizable-image">
    <img src="../../blog_images/rebuilding-my-website/rmw-publish-basic.png" alt="main.Swift file in Publish"/>
</div><br /><p>First, there's an enum called SectionID. This is where you describe what sections your website will have. Mine are the four main tabs at the top of the page: <a href="https://ryantoken.com/blog" target="_blank">Blog</a>, <a href="https://ryantoken.com/projects" target="_blank">Projects</a>, <a href="https://ryantoken.com/meta" target="_blank">Meta</a>, and <a href="https://ryantoken.com/about" target="_blank">About</a>.</p><p>Next, there's a struct called ItemMetadata. This is site-specific metadata which we‚Äôll be able to use in a fully type-safe manner all throughout our publishing process. I don't have anything in there at this point because, honestly, I don't know what benefit it would give a site as simple as mine.</p><p>And finally, there are five variables that finalize some information for the website. The last step is the 'try' statement that actually calls on Publish to generate the HTML and CSS files that your browser will serve up to show you this page.</p><p>It's really an incredibly simple layout.</p><p>This blog post, and every one that will come after it, are simple Markdown files that the Swift package can reference.</p><br /><h2>Next Steps</h2><p>When this post comes out, I will still be using Publish's built-in theme for the site. However, Publish uses another framework (also built by John Sundell) called Plot that allows for custom themes to be built and used by Publish.</p><p>My next goal for this site is to create my own theme and really customize a lot of it. Step one was just to get it the new site out the door.</p><p>I'm incredibly excited for the journey that this site will lead me down. I've been dying to use Swift for something outside of strictly Ô£ø development, and have also badly wanted to create my own blog. Publish satisfies both of those needs while allowing for as little or as much customization as I'd want or need.</p><p>I plan to dive head-first into Plot (Sundell's theming engine) in the very near future to add some more color, dynamism, and customization to the site. Keep an eye out for changes in that area soon.</p><br /><p>Stay tuned! I can't wait to see how this goes.</p><br /><p><strong><a href="#">Back to Top</a></strong></p>]]></content:encoded></item></channel></rss>