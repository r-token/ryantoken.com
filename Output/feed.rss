<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Ryan Token</title><description>I'm a üíª programmer, üéôÔ∏è podcaster, üìù writer, üèàüèÄ sports fan, and Ô£ø enthusiast.</description><link>https://ryantoken.com</link><language>en</language><lastBuildDate>Fri, 8 May 2020 11:11:25 -0500</lastBuildDate><pubDate>Fri, 8 May 2020 11:11:25 -0500</pubDate><ttl>250</ttl><atom:link href="https://ryantoken.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://ryantoken.com/blog/catching-up</guid><title>Catching Up</title><description>Modernizing CatchUp, my first iOS app, with SwiftUI, Core Data, and cleaner code.</description><link>https://ryantoken.com/blog/catching-up</link><pubDate>Fri, 8 May 2020 08:00:00 -0500</pubDate><content:encoded><![CDATA[<h1>Catching Up</h1><p>May 08, 2020</p><p><em>Modernizing CatchUp, my first iOS app, with SwiftUI, Core Data, and cleaner code.</em></p><br /><hr><br /><p>CatchUp - Keep in Touch was first released on May 6, 2018. It was the first iOS app I'd ever published to the App Store. Almost exactly two years later, I'm publishing this blog post and releasing an all-new, completely rewritten version of CatchUp.</p><p>This post talks about the origins of CatchUp, my decision to start over from scratch, implementing SwiftUI and Core Data (mostly SwiftUI), and writing cleaner code. At the end of this post, I do a bit of comparison between the new version and the previous version.</p><br /><h2>Getting Started with iOS</h2><p>When I graduated from college in 2017 I was primarily only familiar with web development. I had never taken a mobile development course in school and knew nothing about Objective-C or Swift. For whatever reason, iOS/mobile development hadn't truly crossed my mind until after graduation. But once I started down that path in late 2017 I never turned back.</p><p>I spent the next several months learning the basics of Swift, UIKit, and everything else that comes along with iOS development. Most of that learning came via courses on <a href="https://www.udemy.com" target="_blank">Udemy</a>, tutorials from <a href="https://www.hackingwithswift.com" target="_blank">Hacking with Swift</a> and <a href="https://www.swiftbysundell.com" target="_blank">Swift by Sundell</a>, finding answers on <a href="https://stackoverflow.com" target="_blank">Stack Overflow</a>, and stumbling around in the dark by myself until I happened upon a solution.</p><p>When all was said and done I had my first app, and it worked! Much like <a href="https://ryantoken.com/blog/rebuilding-my-website" target="_blank">version one of my website</a>, it wasn't the greatest app in the world, but it was my app, and I was proud to have built it.</p><p>I put it out on the App Store on May 6, 2018, and, to my surprise, it did reasonably well. It even caught some publicity in the form of a feature in Brett Terpstra's <a href="https://esn.fm/systematic/218" target="_blank">Systematic</a> podcast around the 46:00 minute mark of episode 218.</p><p>However, over the following months/years, CatchUp began to suffer from some poor original choices made in the app.</p><br /><h2>A Lull in Development</h2><p>During the first few months after release in 2018, I updated CatchUp semi-regularly with new features and some minor design tweaks. However, as I began evaluating some larger-scope features I wanted to implement, I continued to run into the same problem.</p><p>Above all else, my existing code was just plain <em>bad</em>.</p><p>As I mentioned, I put this out pretty much immediately after I had learned the basics of Swift and iOS development. Knowing the basics != knowing how to make a good application. My naming was poor, many functions were massive and had far too many interspersed responsibilities, there was no consistency in where components were located, I was practically trial-and-erroring my Storyboards, etc. The list could go on and truly envelop this entire post. I'll spare you that pain.</p><p>The app was simple and straightforward enough that nearly all of this went unnoticed by users. There was only one noticeable performance issue and it didn't bother me enough at the time. As I said, the app was doing well! It was receiving nearly all 5-star reviews and was featured on a podcast. What more could I ask for?</p><p>Lesson learned. Good reviews do not mean a high-quality application. As my plans for the app grew more ambitious, and as I learned more about proper development from my full-time job, the code atrocities I was committing became ever more glaring. I consistently ran into walls caused by poor code quality as I continued to explore implementing more robust features.</p><p>I simply lost motivation for the app about a year after release. I didn't want to put forth the necessary effort to fix the underlying problems with the code that were holding it back. And so... In May of 2019, CatchUp was essentially left to die. Then came the email from Apple.</p><br /><h2>Starting Over</h2><p>In March 2020, Apple sent an email to all developers with a reminder that all apps for iPhone or iPad must be built with the iOS 13 SDK or later by June 30. If they weren't, they would no longer be available on the App Store.</p><p>CatchUp was my first iOS app; it holds a special place in my heart. But it was poorly written and had become increasingly difficult to maintain because of that.</p><p>This brought me to a crossroads of sorts. I saw three options in front of me.</p><br /><p><strong>Option 1: Let it die.</strong></p><p>I honestly did consider this. My initial attempts at building the app with the iOS 13 SDK severely broke a significant amount of functionality. Figuring this out would mean an even bigger maintenance hole to dig myself out of.</p><p><strong>Option 2: Bite the bullet and fix the app, but stick with the core technologies I began with.</strong></p><p>This probably would have taken less time than the option I ended up choosing, but would have been far less fun, and I would have learned so much less.</p><p><strong>Option 3: Start from scratch and rewrite everything.</strong></p><p>Why not just blow away the whole project and start over?</p><p>A headlining announcement from WWDC 2019 was the debut of <a href="https://developer.apple.com/xcode/swiftui/" target="_blank">SwiftUI</a>. SwiftUI is a brand new framework from Apple that allows you to build user interfaces declaratively. Previously, all of iOS development was done imperatively using <a href="https://developer.apple.com/documentation/uikit" target="_blank">UIKit</a>. I watched the announcement happen live, and was instantly excited and drawn to it. I had initially considered rewriting parts of CatchUp with SwiftUI, but not the entire app.</p><br /><p>Clearly I picked <strong>Option 3</strong>. SwiftUI marked the dawn of a new era in iOS development, and this was the perfect excuse for me to start a new project and learn how SwiftUI works.</p><p>Option 3 also provided the perfect opportunity to address what ended up being one of the worst decisions I made while building the original app: using <a href="https://developer.apple.com/documentation/foundation/userdefaults" target="_blank">UserDefaults</a> as my persistence/storage system instead of <a href="https://developer.apple.com/documentation/coredata" target="_blank">Core Data</a>.</p><p>Everything in version 1.x of CatchUp uses UserDefaults. I didn't choose UserDefaults because I thought that was the <em>right</em> way to do it, I chose UserDefaults simply because that's what I had learned from the Udemy course I took when first learning iOS development. I knew nothing about Core Data or how it worked at the time, and storing everything in UserDefaults has plagued CatchUp from the beginning. Until today.</p><p>So there was my path forward. A complete rebuild using SwiftUI over UIKit, and Core Data over UserDefaults. I was ecstatic about the idea, and CatchUp would get to live to see another day.</p><br /><h2>Implementing SwiftUI</h2><p>On the same day that SwiftUI was first announced back in 2019, I started working through Apple's (legitimately wonderful) <a href="https://developer.apple.com/tutorials/swiftui/tutorials" target="_blank">Learn to Make Apps with SwiftUI</a> tutorials. I also participated in Hacking with Swift's (also wonderful) <a href="https://www.hackingwithswift.com/100/swiftui" target="_blank">100 Days of SwiftUI</a> course and read <a href="https://www.hackingwithswift.com/quick-start/swiftui" target="_blank">SwiftUI by Example</a>. All of these things together gave me enough knowledge to feel somewhat comfortable with SwiftUI, even though documentation around it was/is not quite there.</p><p>In the case of implementing Core Data, it's been around since 2005. There are <em>plenty</em> of resources out there to help you learn and understand how it works. SwiftUI was built to play nicely with Core Data as well, so after a few articles and WWDC videos from previous years, I felt good enough on that side of things.</p><p>The rewrite started off moving at lightspeed. SwiftUI was <strong>amazing</strong>. Legitimately. I had a full mockup of all the major aspects of the user interface done in just a few hours, and they all looked better than before.</p><p>Of course, as expected and as I've heard from others who have used SwiftUI, once you get past the basics and move into an area where not much has been done yet, you find yourself in a strange and unknown world of mystery. Here are a couple of the strangest SwiftUI holes I found myself in.</p><br /><p><strong>SwiftUI Issue #1:</strong></p><p>In CatchUp's 'Preference' screen, there are a few different pickers you might work with. I wanted to run some code every time one of those pickers was interacted with. Sounds simple enough, right? Using SwiftUI's onReceive modifier <em>does</em> work, but actually getting the value out the picker when onReceive is triggered is much weirder than you'd think.</p><p>You have to attach [self.<em>someSelection</em>].publisher.first() to the onReceive call, and then pass in the value from the picker via a closure. I can only hope that this is fixed in a subsequent SwiftUI update because it was maddeningly difficult to figure that out.</p><p>Here's the workaround I found on Stack Overflow - the fix is highlighted at the bottom of the picture:</p><style type="text/css">
.resizable-image img {
    text-align: center;
    margin: auto;
    width: 100%;
    border-radius: 5px;
}
</style><br /><div class="resizable-image">
    <img src="../../blog_images/catchingup-onReceive.png" alt="SwiftUI onReceive weirdness"/>
</div><br /><p><strong>SwiftUI Issue #2:</strong></p><p>At the time of writing, you need to manually pass Core Data's <a href="https://developer.apple.com/documentation/coredata/nsmanagedobject/1506677-managedobjectcontext" target="_blank">managed object context</a> from one view to another if you want to be able to use that context in the view you're navigating to.</p><p>SwiftUI's <a href="https://developer.apple.com/documentation/swiftui/environment" target="_blank">@Environment</a> property wrapper should theoretically allow the managed object context to be accessible from anywhere. You shouldn't need to manually pass it along.</p><p>Unfortunately, this appears to be a bug in the version of SwiftUI I built the app on. So I had to use the following workaround to pass in the managed object context.</p><p>Here's what I found:</p><br /><div class="resizable-image">
    <img src="../../blog_images/catchingup-moc.png" alt="SwiftUI MOC weirdness"/>
</div><br /><p>There were several other small issues that I bumped into when building this out, but those two took me the longest to find solutions for. In general, though, this is what my browser typically looked like while in the throes of SwiftUI development:</p><br /><div class="resizable-image">
    <img src="../../blog_images/catchingup-somanytabs.png" alt="SwiftUI Browser Tabs"/>
</div><p><em>So. Many. SwiftUI. Tabs. (shout-out to Hacking with Swift and Swift by Sundell for solving most of my problems)</em></p><br /><p>There's also a <strong>third issue</strong> that still hasn't been resolved as of this post being published and the app being released. Apple's Contacts frameworks don't work with SwiftUI at all.</p><p>To be fair, this is the case with several frameworks since SwiftUI is still so new. However, for most frameworks that don't work natively with SwiftUI, you can simply create a bridge into UIKit. You'd render just those views using UIKit instead of SwiftUI, then come back to SwiftUI when you're done. The interplay between SwiftUI and UIKit was heavily advertised when SwiftUI was debuted in 2019, and, for the vast majority of frameworks, seems to work as expected.</p><p>Unfortunately, I've found the bridging between SwiftUI and UIKit for the contact picker to be especially buggy. This is not ideal. The contact picker - which shows up when you tap the 'Add Contacts' button on CatchUp's home screen - is likely the first button you'll ever tap in the app. I don't want a user's first experience with my app to feel buggy and show strange animation glitches.</p><p>I filed my first ever <a href="https://developer.apple.com/support/technical/" target="_blank">Technical Support Incident (TSI)</a> with Apple, and hope to have a resolution for that bug shortly.</p><p>I want to make something especially clear, though: Despite the somewhat bumpy road, I have <strong>loved</strong> working with SwiftUI. It has been a true joy and has significantly improved how I go about creating user interfaces. CatchUp V1 used Storyboards exclusively, and I would be more than OK with never having to create a Storyboard again. I know I could have done my layout programmatically with UIKit, but it's hard to imagine a system as clean and as nice as SwiftUI is proving to be.</p><br /><h2>Wrapping Up with Clean Code</h2><p>As I was putting the finishing touches on version 2.0 of CatchUp, I started reading <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank">Clean Code</a> by "Uncle" Bob Martin.</p><p>I'll tell you what, dear reader, there could not have been a better time for me to read this book.</p><p>Since releasing the original app in 2018, I had learned a lot. I knew the SOLID principles, I understood the importance of proper naming and concise logic, etc., but all of that truly sank in on a deeper level upon reading that book on my own.</p><p>While reading it, I found that nearly every chapter gave me some new idea on how to organize or clean up my code even further. It was a fantastic experience. I went from code, to book, to code, to book, and back and forth again and again until I was satisfied with the app as a whole.</p><p>If you haven't read it, and you want to be a better programmer, I can't recommend it enough. Even being over a decade old at this point, I found it incredibly valuable.</p><p>Before reading it, CatchUp 2.0 was a massive improvement in underlying code quality simply from having gained more experience and a greater understanding of what "good" code is. After reading it, I am quite proud of the quality of code I've written. To be sure, there is more work to be done and more improvements to be made. But to have rewritten an entire app from scratch, leave all the cruft and bad ideas behind, and come out on the other end with what I have now is immensely satisfying.</p><p>Here's a single point of reference for you: the difference in the number of total lines of code from version 1.1.2 to version 2.0.0, one update (and one year) later.</p><p>Lines of code is by no means a proper metric for overall code quality, but I think it represents how much simplification I was able to do for what is, by all accounts, an app that has <em>more</em> functionality than the previous version.</p><p><strong>Total lines of code in CatchUp version 1.1.2:</strong> 2,924</p><p><strong>Total lines of code in CatchUp version 2.0.0:</strong> 1,905</p><p><em>Lines of code counted with <a href="https://github.com/AlDanial/cloc" target="_blank">cloc</a></em></p><p>Over 1,000 fewer lines of code! For an app that is more advanced and has more functionality, I consider that a significant win.</p><br /><h2>What's Next</h2><p>With SwiftUI and cleaner code, CatchUp is ready for the new era of iOS development. I plan to write all of my personal apps in SwiftUI going forward unless there is something that makes it physically impossible to do so.</p><p>I'm proud of the product that's available out there now, and look forward to continuing to build on the modern foundation it has today.</p><p>CatchUp is completely free with no ads. Download the all-new CatchUp ‚Äì Keep in Touch below:</p><br /><a href="https://itunes.apple.com/us/app/catchup-keep-in-touch/id1358023550" target="_blank" style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/assets/shared/badges/en-us/appstore-lrg.svg) no-repeat;width:270px;height:80px;background-size:contain;"></a>]]></content:encoded></item><item><guid isPermaLink="true">https://ryantoken.com/blog/rebuilding-my-website</guid><title>Rebuilding My Website</title><description>Why I decided to rebuild ryantoken.com from the ground up, and how I did it with Swift (and without JavaScript).</description><link>https://ryantoken.com/blog/rebuilding-my-website</link><pubDate>Sun, 22 Mar 2020 11:02:00 -0500</pubDate><content:encoded><![CDATA[<h1>Rebuilding My Website</h1><p>March 22, 2020</p><p><em>Why I decided to rebuild ryantoken.com from the ground up, and how I did it with Swift (and without JavaScript).</em></p><br /><hr><br /><h2>Website V1: Bootstrap All the Things</h2><p>The summer of 2015 was the summer between my sophomore and junior years at the University of Tulsa. I had taken a few programming classes by that point, and was drawn to web development. To prove to myself that I knew my way around the basics, I wanted to build a personal website ‚Äì I didn't have a plan for it, but I knew that I wanted it.</p><p>Most recently, I had learned about a tool called <b><a href="https://getbootstrap.com/" target="_blank">Bootstrap</a></b>. Everyone and their mother raved about Bootstrap. In 2015, it sounded like the end-all be-all for responsive web design. Spoiler: it wasn't. But I, a young and impressionable college student, Bootstrapped the ever-loving heck out of version one of my website.</p><p>See for yourself: (most text blurred out for my own privacy)</p><style type="text/css">
.resizable-image img {
    text-align: center;
    margin: auto;
    width: 100%;
    border-radius: 5px;
}
</style><br /><div class="resizable-image">
    <img src="../../blog_images/rmw-websiteV1-blurred.png" alt="ryantoken.com v1"/>
</div><p><em>You don't get much more Bootstrappy than that.</em></p><br /><p>There are several items there that scream Bootstrap (and inexperience) if you know what you're looking for.</p><p>What screams Bootstrap? If you're familiar with it at all, you'll probably notice them immediately. The header, the Jumbotron (or Hero Unit, as Bootstrap now calls it), the three-column layout, and the footer.</p><p>All four of those items are classic, vanilla Bootstrap with very few modifications. Remember ‚Äì in 2015 I was a bona-fide noob in the world of web development. I had no idea what I was doing. Bootstrap was awesome, and in some ways still is. It solved a lot of problems for a fledgling web developer.</p><p>Also, apparently CSS gradients were the greatest things I'd ever seen, as I threw different variations of them wherever I could fit them.</p><p>But hey, this was the first website I had built completely on my own. I had no input from a boss, teachers, or fellow students. I was, and still am, proud that I built it. I learned a lot that I wouldn't have learned otherwise, it helped solidify my love of web development, and when all was said and done, there was a product out there that the world could see.</p><br /><h2>Iterations</h2><p>So that was 2015. Until this complete rebuild in March of 2020, it stayed <em>more or less</em> the same for the next several years. It did go through a couple of design refreshes over that time, though.</p><p>Notably:</p><br /><div class="resizable-image">
    <img src="../../blog_images/rmw-websiteV2-blurred.png" alt="ryantoken.com v2"/>
</div><br /><br /><p>And then:</p><br /><div class="resizable-image">
    <img src="../../blog_images/rmw-websiteV3-blurred.png" alt="ryantoken.com v3"/>
</div><br /><br /><p>In the first of those two design refreshes, I got my feet wet with transparency, and added some dynamic functionality to the footer that let you navigate the website page-by-page from there.</p><p>The second is how the website looked the day before I published the rewrite you're reading this on now.</p><p>I finally got rid of those blue-teal gradient boxes, left the three-column layout behind, added some dimensionality and pictures, and significantly simplified the codebase.</p><p>However, after five years of the same basic layout, it was time for a complete re-think of my website. The previous site felt stale and I didn't enjoy working on it or adding to it as much anymore. More than anything, though, was the fact that I'm out of college now.</p><p>The previous site was very much focused on me, my resume, and my portfolio of projects. I no longer felt that I needed as much of a 'resume' site. My mindset has shifted dramatically since college, and so my website needed to shift dramatically along with it.</p><br /><h2>Considering My Options</h2><p>I knew I wanted to completely recreate the website with modern developer tools and a system that would be easy and fun to iterate on. I did not know, however, what exactly I'd be using to kick this off. To help narrow those options down, I listed out my goals for the site:</p><div>
<ul style="margin-left: 25px">

    <li> It should have a blogging component </li>
    
    <li> It should be fun for me to work on and add to, instead of feeling like a chore </li>
    
    <li> It should be built with a modern language and toolset </li>
    
    <li> It should not look like every other personal website out there </li>
    
</ul>
</div><br /><p>I've added several new skills to my personal toolbox since 2015, my favorites of which are <a href="https://reactjs.org/" target="_blank">React</a> and <a href="https://developer.apple.com/swift/" target="_blank">Swift</a>. I use React for most of my web projects, and Swift and <a href="https://developer.apple.com/xcode/swiftui/" target="_blank">SwiftUI</a> for native iOS projects.</p><p>On the side, I run a podcast and blog covering University of Tulsa athletics. As part of that, I built <a href="https://thegoldenhurricast.com" target="_blank">our website</a> with React. That was my first React project, and you might see some similarities to the screenshots above. That's because, more for comfort than anything, I used <a href="https://react-bootstrap.github.io/" target="_blank">React Bootstrap</a> to create the front-end. It's basically Bootstrap rebuilt for use in a React environment. It was easy to pick up due to my familiarity with Bootstrap, and I liked it, but I've since been using <a href="https://material-ui.com/" target="_blank">Material-UI</a> for React projects.</p><p>I wrote a <a href="https://thegoldenhurricast.com/blog" target="_blank">blogging engine</a> with React as part of that project, and my first inclination was to reuse the skills I had picked up from that. I would've gone with Material-UI instead of React Bootstrap for the front-end design, but I could have reused a lot of the rest. That would have been the easier way for me, and I strongly considered that option.</p><p>Contrarily, I've been pretty deep into iOS development since 2017. I taught myself Swift, released my <a href="https://apps.apple.com/us/app/catchup-keep-in-touch/id1358023550" target="_blank">first iOS app</a> in May of 2018, and have several more that I've worked on locally but haven't released. Let me be clear, I <em>really</em> enjoy writing code with Swift. The type-safety, readability, community, and plenty more made it incredibly fun to learn.</p><p>I've long wanted to build a website with Swift, but was never fully satisfied with the available tools. I've toyed around with server-side Swift frameworks like <a href="https://vapor.codes/" target="_blank">Vapor</a> and <a href="https://www.kitura.io/" target="_blank">Kitura</a>, and found both to be capable but overly-complicated solutions for what I wanted.</p><p>And then I found <a href="https://github.com/JohnSundell/Publish" target="_blank">Publish</a>. Publish is an open-source "static site generator for Swift developers" built by <a href="https://twitter.com/johnsundell" target="_blank">John Sundell</a>. John is a former lead iOS developer at Spotify who now runs his own company called <a href="https://swiftbysundell.com" target="_blank">Swift by Sundell</a> that is, naturally, all about Swift development. Publish was open-sourced in December of 2019, and all of Swift by Sundell is built with Publish.</p><br /><h2>A Full Redesign ‚Äì Zero JavaScript</h2><p>I cloned Publish from GitHub to familiarize myself with it for a few days, and was hooked. I decided that this was the best (and most fun) answer.</p><p>Publish was exactly what I was looking for. It lets you build and configure your <strong>entire website</strong> with Swift and <a href="https://daringfireball.net/projects/markdown/" target="_blank">Markdown</a>, nearly everything is customizable, and it comes with native support for blogging built in. It also supports custom themes, plugins, and a host of other powerful options.</p><p>There is <strong>zero JavaScript</strong> throughout the entire site. This doesn't attempt to solve the <a href="https://www.youtube.com/watch?v=kZRE7HIO3vk&t=4160s" target="_blank">Thirty Million Line Problem</a>, but it does mitigate the bloat of <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f" target="_blank">JavaScript Framework Hell</a>. That's a great article by the way, well worth the read. Long story short, front-end JavaScript frameworks come with a LOT of bloat, most of which will never be of use to you. Getting rid of all that code speeds up load times <em>significantly</em>, hopefully you'll notice that while navigating my site.</p><p>The main Swift file to build a site with Publish is incredibly simple to understand. Here's what mine first looked like:</p><br /><div class="resizable-image">
    <img src="../../blog_images/rmw-publish-basic.png" alt="main.Swift file in Publish"/>
</div><br /><p>First, there's an enum called SectionID. This is where you describe what sections your website will have. Mine are the four main tabs at the top of the page: <a href="https://ryantoken.com/blog" target="_blank">Blog</a>, <a href="https://ryantoken.com/projects" target="_blank">Projects</a>, <a href="https://ryantoken.com/meta" target="_blank">Meta</a>, and <a href="https://ryantoken.com/about" target="_blank">About</a>.</p><p>Next, there's a struct called ItemMetadata. This is site-specific metadata which we‚Äôll be able to use in a fully type-safe manner all throughout our publishing process. I don't have anything in there at this point because, honestly, I don't know what benefit it would give a site as simple as mine.</p><p>And finally, there are five variables that finalize some information for the website. The last step is the 'try' statement that actually calls on Publish to generate the HTML and CSS files that your browser will serve up to show you this page.</p><p>It's really an incredibly simple layout.</p><p>This blog post, and every one that will come after it, are simple Markdown files that the Swift package can reference.</p><br /><h2>Next Steps</h2><p>When this post comes out, I will still be using Publish's built-in theme for the site. However, Publish uses another framework (also built by John Sundell) called Plot that allows for custom themes to be built and used by Publish.</p><p>My next goal for this site is to create my own theme and really customize a lot of it. Step one was just to get it the new site out the door.</p><p>I'm incredibly excited for the journey that this site will lead me down. I've been dying to use Swift for something outside of strictly Ô£ø development, and have also badly wanted to create my own blog. Publish satisfies both of those needs while allowing for as little or as much customization as I'd want or need.</p><p>I plan to dive head-first into Plot (Sundell's theming engine) in the very near future to add some more color, dynamism, and customization to the site. Keep an eye out for changes in that area soon.</p><p>In the meantime, I'll probably be writing about my experience with React while building <a href="https://thegoldenhurricast.com" target="_blank">thegoldenhurricast.com</a> in the next month or so. After that, I will absolutely have a post or two once WWDC 2020 kicks off in an <a href="https://www.apple.com/newsroom/2020/03/apples-wwdc-2020-kicks-off-in-june-with-an-all-new-online-format/" target="_blank">online-only</a> format in June.</p><br /><p>Stay tuned! I can't wait to see how this goes.</p>]]></content:encoded></item></channel></rss>